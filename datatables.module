<?php

/**
 * @file
 * Provides integration of the jQuery DataTables plugin
 */

/**
 * Implements hook_theme().
 */
function datatables_theme() {
  return array(
    'datatable' => array(
      'variables' => array(
        'header' => NULL,
        'rows' => NULL,
        'attributes' => NULL,
        'caption' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_library_info().
 */
function datatables_library_info() {
  $libraries = array();

  $lib_path = backdrop_get_path('module', 'datatables') . '/DataTables';

  // Make sure we have a valid library path before returning library load info.
  if (!empty($lib_path)) {
    $libraries['datatables'] = array(
      'title' => 'DataTables',
      'website' => 'https://datatables.net/',
      'version' => '2.0.5',
      'js' => array(
        $lib_path . '/dataTables.min.js' => array(),
        backdrop_get_path('module', 'datatables') . '/js/datatables.js' => array(),
        $lib_path . '/dataTables.responsive.min.js' => array(),
//        $lib_path . '/responsive.dataTables.js' => array(), // why???
      ),
      'css' => array(
        $lib_path . '/dataTables.dataTables.min.css' => array(),
        $lib_path . '/responsive.dataTables.min.css' => array(),
      ),
    );

    $libraries['datatables-buttons'] = array(
      'title' => 'Buttons (successor of Tabletools) plugin for DataTables',
      'website' => 'https://datatables.net/extensions/buttons',
      'version' => '3.0.2',
      'js' => array(
        $lib_path . '/dataTables.buttons.js' => array(),
        $lib_path . '/buttons.colVis.js' => array(),
        $lib_path . '/buttons.html5.js' => array(), // Copy button
        $lib_path . '/buttons.print.js' => array(), // Print button
        $lib_path . '/jszip.js' => array(), // Excel Export button
        $lib_path . '/pdfmake.js' => array(), // PDF Export button
        $lib_path . '/vfs_fonts.js' => array(), // PDF Export button
      ),
      'css' => array(
        $lib_path . '/buttons.dataTables.min.css' => array(),
      ),
      'dependencies' => array(
        array('datatables', 'datatables'),
      ),
    );
  }

  return $libraries;
}

/**
 * Implements hook_views_api().
 */
function datatables_views_api() {
  return array(
    'api' => 3.0,
    'path' => backdrop_get_path('module', 'datatables') . '/views',
  );
}

/**
 * Return a themed DataTable.
 *
 * This function takes the same parameters as theme_table, but also allows the
 * inclusion of DataTable specific information in the $header and $attributes
 * parameters in order to configure a DataTable.  If an id is not set in the
 * $attributes paramater, a unique one is generated.
 *
 * To set features and options for the DataTable, add
 * $parameters['datatable_options'] as an associative array.
 * For example:
 * @code
 *   $parameters['datatable_options'] = array(
 *     'filter'   => FALSE,  // Disable filtering of data.
 *     'info'     => TRUE,   // Show the table information display.
 *     'order' => array(  // Sort by 3rd column first, and then 4th column.
 *        array(2, 'asc'),
 *        array(3, 'desc'),
 *      ),
 *   );
 * @endcode
 * 
 * Then, these parameters must be passed to the theming function under the `attributes` key, as in:
 * @code
 *   $output = theme('datatable', array('header' => $header, 'rows' => $rows, 'attributes' => $parameters));
 * @endcode
 * See https://datatables.net/reference/feature/ and
 * https://datatables.net/reference/option/ for a full list of features and options.
 *
 * To enable column specific options, set the datatable_options for each of the
 * columns in the $header parameter.
 * For example:
 * @code
 *   $header = array(
 *     array(
 *       'data' => t('Column 1'),
 *       'datatable_options' => array(
 *        'orderable' => TRUE,  // Enable sorting on this column.
 *       ),
 *     ),
 *     array(
 *       'data' => t('Column 2'),
 *       'datatable_options' => array(
 *         'searchable' => FALSE, // Disable filtering on this column.
 *       ),
 *     ),
 *   );
 * @endcode
 * Note: if the columns option is enabled in $parameters['datatable_options'],
 * then all datatable_options in the $header parameter will be ignored, since
 * the parameters will override column options.  See
 * https://datatables.net/reference/option/ for a full list of column options.
 *
 * @param array $variables
 *   An associative array containing:
 *   - header: An array containing the table headers. Each element of the array
 *     can be either a localized string or an associative array with the
 *     following keys:
 *     - "data": The localized title of the table column.
 *     - "field": The database field represented in the table column (required
 *       if user is to be able to sort on this column).
 *     - "sort": A default sort order for this column ("asc" or "desc").
 *     - Any HTML attributes, such as "colspan", to apply to the column header
 *       cell.
 *     - "datatable_options": An associative array containing DataTable column
 *       specific features/options.
 *   - rows: An array of table rows. Every row is an array of cells, or an
 *     associative array with the following keys:
 *     - "data": an array of cells
 *     - Any HTML attributes, such as "class", to apply to the table row.
 *     - "no_striping": a boolean indicating that the row should receive no
 *       'even / odd' styling. Defaults to FALSE.
 *     Each cell can be either a string or an associative array with the
 *     following keys:
 *     - "data": The string to display in the table cell.
 *     - "header": Indicates this cell is a header.
 *     - Any HTML attributes, such as "colspan", to apply to the table cell.
 *     Here's an example for $rows:
 *     @code
 *     $rows = array(
 *       // Simple row
 *       array(
 *         'Cell 1', 'Cell 2', 'Cell 3'
 *       ),
 *       // Row with attributes on the row and some of its cells.
 *       array(
 *         'data' => array('Cell 1', array('data' => 'Cell 2', 'colspan' => 2)),
 *         'class' => array('funky')
 *       )
 *     );
 *     @endcode
 *   - attributes: An array of HTML attributes to apply to the table tag. Use
 *     the key 'datatable_options' to pass an array of DataTable options.
 *   - caption: A localized string to use for the <caption> tag.
 *   - colgroups: An array of column groups. Each element of the array can be
 *     either:
 *     - An array of columns, each of which is an associative array of HTML
 *       attributes applied to the COL element.
 *     - An array of attributes applied to the COLGROUP element, which must
 *       include a "data" attribute. To add attributes to COL elements, set the
 *       "data" attribute with an array of columns, each of which is an
 *       associative array of HTML attributes.
 *     Here's an example for $colgroup:
 *     @code
 *     $colgroup = array(
 *       // COLGROUP with one COL element.
 *       array(
 *         array(
 *           'class' => array('funky'), // Attribute for the COL element.
 *         ),
 *       ),
 *       // Colgroup with attributes and inner COL elements.
 *       array(
 *         'data' => array(
 *           array(
 *             'class' => array('funky'), // Attribute for the COL element.
 *           ),
 *         ),
 *         'class' => array('jazzy'), // Attribute for the COLGROUP element.
 *       ),
 *     );
 *     @endcode
 *     These optional tags are used to group and set properties on columns
 *     within a table. For example, one may easily group three columns and
 *     apply same background style to all.
 *   - sticky: Use a "sticky" table header.
 *   - empty: The message to display in an extra row if table does not have any
 *     rows.
 *  - attributes: An array of HTML attributes to apply to the table tag.  If the
 *   datatable_options is set, then those options are passed to the dataTable
 *   constructor.
 *  - caption: A localized string to use for the <caption> tag.
 *
 * @return string
 *   An HTML string representing the table.
 * @see theme_table()
 */
function theme_datatable($variables) {
  $header = &$variables['header'];
  $attributes = &$variables['attributes'];

  if (isset($variables['rows'])) {
    $datatable_options = !empty($attributes['datatable_options']) ? $attributes['datatable_options'] : array();

    // Column settings can either be set with the global options
    // or in each header definition.
    if (!isset($datatable_options['columns'])) {
      foreach ($header as $key => $cell) {
        if (isset($cell['datatable_options'])) {
          $datatable_options['columns'][] = $cell['datatable_options'];
          if (is_array($header[$key])) {
            unset($header[$key]['datatable_options']);
          }
        }
      }
    }

    // Set unique id.
    if (!isset($attributes['id'])) {
      $attributes['id'] = _datatables_get_id();
    }

    backdrop_add_library('datatables', 'datatables');
    backdrop_add_js(array('datatables' => array('#' . $attributes['id'] => $datatable_options)), 'setting');
    unset($attributes['datatable_options']);
  }

  return theme('table', $variables);
}

/**
 * Display a view as a DataTable style.
 */
function template_preprocess_datatables_view(&$vars) {
  // Run views table preprocess function to handle putting rows in columns,
  // classes, etc.
  template_preprocess_views_view_table($vars);

  // No need to add anything if there are no rows.
  if (!$vars['rows']) {
    return;
  }

  $view     = $vars['view'];

  $options  = $view->style_plugin->options;
  $handler  = $view->style_plugin;

  $fields   = &$view->field;
  $columns  = $handler->sanitize_columns($options['columns'], $fields);

  $position = 0;
  foreach ($columns as $field => $column) {
    $column_options = NULL;

    if (isset($options['hidden_columns'][$field])) {
      switch ($options['hidden_columns'][$field]) {
        case 'expandable':
          $datatable_options['expandable'] = TRUE;
          // expandable columns are not hidden, but use the class 'none'
          $column_options['className'] = 'none';
          break;
        case 'hidden':
          // Hidden or expandable columns get the visible init option set to
          // false.
          $column_options['visible'] = FALSE;
#          break;
#        default:
#          $column_options['visible'] = TRUE;
      }
    }

    // Render the header labels.
    if ($field == $column && empty($fields[$field]->options['exclude'])) {
      // Overrides clicksort head defined in
      // template_preprocess_views_view_table().
      $vars['header'][$field] = check_plain(!empty($fields[$field]) ? $fields[$field]->label() : '');
      $column_options['title'] = $vars['header'][$field];

      if (empty($options['info'][$field]['sortable']) || !$fields[$field]->click_sortable()) {
        $column_options['orderable'] = FALSE;
      }
      else {
        // Attempt to autodetect the type of field in order to handle sorting
        // correctly.
        if (backdrop_strlen($fields[$field]->last_render) != backdrop_strlen(strip_tags($fields[$field]->last_render))) {
          $column_options['type'] = 'html';
        }
        elseif (is_numeric($fields[$field]->last_render) || $fields[$field] instanceof views_handler_field_numeric) {
#not good          $column_options['type'] = 'num-fmt';
        }
        elseif ($fields[$field] instanceof views_handler_field_date || $fields[$field] instanceof views_handler_field_datetime) {
          $column_options['type'] = 'date';
#          backdrop_add_library('datatables', 'datatables-moment');
#          backdrop_add_js("DataTable.datetime( 'DD.MM.YYYY HH:mm' );", array('type' => 'inline', 'scope' => 'footer'));
        }
        $column_options['orderable'] = TRUE;
      }
      $datatable_options['columns'][] = $column_options;

      // Set default sort order.
      if ($options['default'] == $field) {
        $datatable_options['order'] = [
          'idx' => $position,
          'dir' => $options['info'][$field]['default_sort_order']
        ];
      }
      $position++;
    }
  }

  // Enable table info display and other options, if necessary.
  $datatable_options['info'] = $options['elements']['table_info'];
  $datatable_options['searching'] = $options['elements']['search_box'];
  $datatable_options['stateSave'] = $options['elements']['save_state'];

  $datatable_options['lengthChange'] = $options['pages']['length_change'];
  $datatable_options['pageLength'] = (int) $options['pages']['display_length'];

  // Enable ThemeRoller support, if necessary.
  if ($options['layout']['themeroller']) {
    $datatable_options['jQueryUI'] = TRUE;
  }

  // Pass the sDOM parameter, if one is specified.
  // Keep sdom config name for backwards compatibility with Drupal/DataTables1.x.
  if ($options['layout']['sdom']) {
    $datatable_options['dom'] = $options['layout']['sdom'];
  }

  $datatable_options['autoWidth'] = $options['layout']['autowidth'];

  // Enable full_numbers pagination if selected.
  switch ($options['pages']['pagination_style']) {
    case 'full_numbers':
      $datatable_options['pagingType'] = 'full_numbers';
      break;

    case 'no_pagination':
      $datatable_options['paging'] = FALSE;
      break;

    default:
      // Do nothing. No parameters need to be sent for the default (simple
      // numbers) style.
      break;
  }

  // Enable Buttons (successor of TableTools) plugin support, if necessary.
  if (!empty($options['elements']['table_tools'])) {
    $datatable_options['buttons'] = [
      ['extend' => 'colvis', 'text' => 'Columns', 'titleAttr' => 'Show/hide columns'],
      ['extend' => 'collection', 'text' => 'Export', 'titleAttr' => 'Export data of the table into various formats', 'buttons' => ['copy', 'csv', 'excel', 'pdf', 'print']],
    ];

    if ($datatable_options['lengthChange']) {
      $datatable_options['buttons'][] = ['extend' => 'pageLength', 'text' => 'Rows', 'titleAttr' => 'Select number of rows shown per page'];
    }

    // If a custom dom parameter is passed, assume that "B" is added, otherwise
    // add it manually.
    if (!$options['layout']['sdom']) {
      $datatable_options['dom'] = '<"dt-layout-row"<"dt-layout-cell dt-start"f><"dt-layout-cell dt-end"B>>
        <"dt-layout-row dt-layout-table"rt>
        <"dt-layout-row"<"dt-layout-cell dt-start"i><"dt-layout-cell dt-end"p>>';
    }
    backdrop_add_library('datatables', 'datatables-buttons');
  }

  // Note: a nice overview of text options, but this is not needed
  $datatable_options['language'] = array(
    'emptyTable' => t('No data available in table'),
    'info' => t('Showing !_START_ to !_END_ of !_TOTAL_ entries', array('!_START_' => '_START_', '!_END_' => '_END_', '!_TOTAL_' => '_TOTAL_')),
    'infoEmpty' => t('Showing 0 to 0 of 0 entries'),
    'infoFiltered' => t('(filtered from !_MAX_ total entries)', array('!_MAX_' => '_MAX_')),
    'infoPostFix' => '',
    'processing' => t('Processing...'),
    'lengthMenu' => t('Show !_MENU_ entries', array('!_MENU_' => '_MENU_')),
    'loadingRecords' => t('Loading...'),
    'zeroRecords' => t( 'No matching records found'),
    'search' => t('Search'),
    'paginate' => array(
      'first' => t( 'First'),
      'previous' => t('Previous'),
      'next' => t('Next'),
      'last' => t('Last'),
    ),
    'aria' => array(
      'orderable' => t(': activate to order by this column'),
      'orderableReverse' => t(': activate to order by this column'),
    ),
  );

/* We do this in Javascript later
  if ($datatable_options['expandable']) {
    $datatable_options['responsive'] = ['details' => ['type' => 'column']];
    $details_column_options = ['title' => '', 'data' => false, 'defaultContent' => '', 'className' => 'dt-control', 'orderable' => false, 'visible' => true];
    array_unshift($datatable_options['columns'], $details_column_options);
    $datatable_options['order']['idx']++;
  }
*/

  $vars['id'] = _datatables_get_id();
  $vars['classes'][] = 'display';
  $vars['classes'][] = 'nowrap';  // recommended for responsive tables

  backdrop_add_library('datatables', 'datatables');
  backdrop_add_js(array('datatables' => array('#' . $vars['id'] => $datatable_options)), array('type' => 'setting', 'scope' => JS_DEFAULT));
}

/**
 * Returns an unique DataTable id
 */
function _datatables_get_id() {
  static $datatable_id;
  return 'datatable-' . ++$datatable_id;
}

/**
 * Implements hook_autoload_info().
 */
function datatables_autoload_info() {
  return array(
    'datatables_style_plugin' => 'views/datatables_style_plugin.inc',
  );
}
